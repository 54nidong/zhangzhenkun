1、Mybatis动态sql是做什么的？都有哪些动态sql？简述一下动态sql的执行原理？
   根据条件不同，动态生成不同的sql执行语句。
   <inculde refid=""/>
   <where> <if test=""></if> <foreach collection="" open="(" item="id" close=")" separator=","> #{id} </foreach>
   <choose> <set> <when> <trim prefix="(" suffix=")" suffixOverrides=","></trim>
   实现原理：动态sql使用不同的标签，维护在xml文件中。在初始化时，解析标签，生成sql配置对应的抽象语法树。在执行过程中，根据参数对象，使用不同的语法，生成根据当前请求匹配的动态sql语句。
   参考文档：https://blog.csdn.net/wu_george/article/details/20151385
2、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？
   支持。延迟加载又叫懒加载，也叫按需加载，也就是说先加载主信息，需要的时候，再去加载从信息。代码中有查询语句，当执行到查询语句时，并不是马上去DB中查询，而是根据设置的延迟策略将查询向后推迟。
   延迟加载策略：（1）直接加载：马上到DB中执行select语句进行查询。
   （2）侵入式延迟加载：
   （3）深度延迟加载：
   使用延迟加载的目的: 减轻DB服务器的压力。
   配置：<settings>
   			<setting name="lazyLoadingEnabled" value="true"/>
   		</settings>
   实现原理：通过动态代理实现，代理拦截到指定方法，执行数据加载。
   		Configuration类：
   			aggressiveLazyLoading的属性，当开启时，任何方法的调用都会加载该对象的所有属性。否则，按需加载。
   			lazyLoadingEnabled属性，是否开启延迟加载。
		使用延迟加载创建对象时：
		DefaultResultSetHandler类中：
		//#mark 创建结果对象
			  private Object createResultObject(ResultSetWrapper rsw, ResultMap resultMap, ResultLoaderMap lazyLoader, String columnPrefix) throws SQLException {
			    this.useConstructorMappings = false; // reset previous mapping result
			    final List<Class<?>> constructorArgTypes = new ArrayList<Class<?>>();
			    final List<Object> constructorArgs = new ArrayList<Object>();
			    //#mark 创建返回的结果映射的真实对象
			    Object resultObject = createResultObject(rsw, resultMap, constructorArgTypes, constructorArgs, columnPrefix);
			    if (resultObject != null && !hasTypeHandlerForResultObject(rsw, resultMap.getType())) {
			      final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();
			      for (ResultMapping propertyMapping : propertyMappings) {
			        // issue gcode #109 && issue #149 判断属性有没配置嵌套查询，如果有就创建代理对象
			        if (propertyMapping.getNestedQueryId() != null && propertyMapping.isLazy()) {
			          //#mark 创建延迟加载代理对象
			          resultObject = configuration.getProxyFactory().createProxy(resultObject, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
			          break;
			        }
			      }
			    }
			    this.useConstructorMappings = resultObject != null && !constructorArgTypes.isEmpty(); // set current mapping result
			    return resultObject;
			  }				
	参考：https://my.oschina.net/wenjinglian/blog/1857581
3、Mybatis都有哪些Executor执行器？它们之间的区别是什么？
	Executor: 执行器的顶层接口。
	BaseExecutor：
	BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。
	SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
	ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。
4、简述下Mybatis的一级、二级缓存（分别从存储结构、范围、失效场景。三个方面来作答）？
	一级缓存：存储结构 PerpetualCache	Map<Object, Object> cache = new HashMap<>(); 
	sqlsession有效。执行sqlsession的,delete,update,insert操作则会使一级缓存失效。

	二级缓存：存储结构 PerpetualCache	Map<Object, Object> cache = new HashMap<>(); 
		急于mapper文件的namespace的，多个sqlsession可以共享一个mapper的二级缓存。
		<settings>
			<setting name="cacheEnabled" value="true"/>	
		</settings>
	执行更新操作，commit()则会清空二级缓存。
5、简述Mybatis的插件运行原理，以及如何编写一个插件？
	插件世纪上就是一个拦截器。实现interceptor接口
	
	@Intercepts({ //可以定义多个@Signature
        @Signature(type = StatementHandler.class, //拦截哪个接口
        method = "prepare",//拦截方法名
        args = {Connection.class, Integer.class}) //方法参数
})
public class Myplugin implements Interceptor {

    /**
     * 方法描述 方法增强
     **/
    @Override
    public Object intercept(Invocation invocation) throws Throwable {
        System.out.println("方法增强");
        return invocation.proceed(); //执行原方法
    }

    /**
     * 方法描述 主要是为了将这个拦截器放入到一个拦截器链中
     **/
    @Override
    public Object plugin(Object o) {
        return Plugin.wrap(o, this);
    }

    @Override
    public void setProperties(Properties properties) {
        
    }
}				




































